{"version":3,"file":"static/js/13.b928f919.chunk.js","mappings":"mJAAO,MAAMA,EACb,mBAAAC,EAAAC,UAAAC,OAAIC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAAA,OACbC,GACCH,EAAWI,QACT,CAACC,EAAOC,IAAcD,GAASC,EAAUH,SACzCI,EACA,EAESC,EAAgBL,IACzB,IAAIA,EACJ,MAAO,wJAAgC,EAI9BM,EAAeN,IACxB,KAAIA,EAAMJ,QAAU,KACpB,MAAM,yLAAN,EAGSW,EAAgBP,IAEzB,IADmB,6BACJQ,KAAKR,GACpB,MAAO,0LAAoC,C,uDCrB/C,QAAyB,sBAAzB,EAAsD,oBAAtD,EAAsF,yBAAtF,EAA2H,yBAA3H,EAA6J,sBAA7J,EAA2L,qBAA3L,EAA0N,uBAA1N,EAA0P,sBAA1P,EAAgS,6BAAhS,EAAyU,yBAAzU,EAAwW,mB,uECUxW,MAqEA,EArEmBS,IAEfC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHC,cAAe,CAAC,EAChBC,SAAWC,IACTL,EAAMM,MAAM,CACVC,MAAOF,EAAOG,SACdC,SAAUJ,EAAOI,SACjBC,WAAYL,EAAOK,WACnBC,QAASN,EAAOM,SAChB,EACFC,SAEDC,IAAA,IAAC,aAAEC,EAAY,SAAEC,EAAQ,KAAEC,EAAI,WAAEC,GAAYJ,EAAA,OAE5CK,EAAAA,EAAAA,MAAA,QAAMC,UAAWnB,EAAMP,MAAQ2B,EAAcA,EAAQhB,SAAUU,EAAaF,SAAA,CACzEZ,EAAMP,OAAQQ,EAAAA,EAAAA,KAAA,QAAMkB,UAAWC,EAAMR,SAAEZ,EAAMP,QAAgB,IAC9DQ,EAAAA,EAAAA,KAAA,MAAAW,SAAI,gFACJX,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJC,KAAK,WACLC,UAAWC,EAAAA,EACXC,QAAS,QACTC,UAAU1C,EAAAA,EAAAA,IAAkBY,EAAAA,GAAeE,EAAAA,IAC3C6B,KAAK,OACLC,YAAY,sIAEd3B,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJC,KAAK,WACLC,UAAWC,EAAAA,EACXC,QAAS,QACTC,SAAU9B,EAAAA,GACV+B,KAAK,WACLC,YAAY,qFAGdV,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAYR,SAAA,EAC1BX,EAAAA,EAAAA,KAAA,SAAO4B,QAAQ,cAAajB,SAAC,qFAC7BX,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,aAAaC,UAAU,QAAQI,KAAK,gBAGjD3B,EAAM8B,aACLZ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAUR,SAAA,EACvBX,EAAAA,EAAAA,KAAA,OAAK8B,IAAK/B,EAAM8B,WAAYE,IAAI,aACjC/B,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJC,KAAK,UACLC,UAAWC,EAAAA,EACXC,QAAQ,QACRG,YAAY,kDACZF,SAAU9B,EAAAA,SAIhBK,EAAAA,EAAAA,KAAA,UAAQkB,UAAWC,EAAUO,KAAK,SAASM,SAAUhB,EAAWL,SAAC,8BAGjEX,EAAAA,EAAAA,KAAA,UACEkB,UAAWC,EACXO,KAAK,SACLM,SAAUlB,GAAYE,EACtBiB,QAASlB,EAAKmB,MAAMvB,SACrB,0EAGI,I,cCxEf,MAAMwB,EAAcC,GAASA,EAAMC,KAEtBC,GAAoBC,EAAAA,EAAAA,IAAeJ,GAAaC,GAASA,EAAMI,SAE/DC,GAAwBF,EAAAA,EAAAA,IAAeJ,GAAaC,GAASA,EAAMP,aAEnEa,GAAmBH,EAAAA,EAAAA,IAAeJ,GAAaC,GAASA,EAAM5C,QCM3E,MA2BA,GAAemD,EAAAA,EAAAA,KAjCQP,IAAK,CAC1BI,OAAQF,EAAkBF,GAC1BP,WAAYY,EAAsBL,GAClC5C,MAAOkD,EAAiBN,MA8Bc,CAAEQ,UAAU,MAApD,EA3Be7C,GACTA,EAAMyC,QACDxC,EAAAA,EAAAA,KAAC6C,EAAAA,GAAQ,CAACC,GAAI,cAGrB7B,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACEX,EAAAA,EAAAA,KAAA,MAAIkB,UAAWC,EAASR,SAAC,mQAGzBM,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAgBR,SAAA,EAC9BX,EAAAA,EAAAA,KAAC+C,EAAS,CAACvD,MAAOO,EAAMP,MAAOqC,WAAY9B,EAAM8B,WAAYxB,MAAON,EAAM6C,aAC1E3B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAASR,SAAA,EACvBX,EAAAA,EAAAA,KAAA,MAAAW,SAAI,wEACJX,EAAAA,EAAAA,KAAA,KACEgD,OAAO,SACPC,UAAQ,EACRC,YAAU,EACVC,KAAK,8CAA6CxC,UAElDX,EAAAA,EAAAA,KAAA,UAAQkB,UAAWC,EAAYR,SAAC,sG,+CChC5C,QAA8B,kCAA9B,EAAwE,4B,aCGjE,MAAMY,EAAeX,IAAuC,IAAtC,QAACY,EAAO,MAAE4B,EAAK,KAAEC,KAAStD,GAAMa,EACzD,MAAM0C,EAAWD,EAAKE,SAAWF,EAAK7D,MACtC,OAAOyB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAgB,KAAOmC,EAAWnC,EAAU,IAAIR,SAAA,CAClE6C,EAAAA,cAAoBhC,EAAS,IAAI4B,KAAUrD,IAC3CuD,GAAWtD,EAAAA,EAAAA,KAAA,QAAAW,SAAO0C,EAAK7D,QAAgB,KAClC,C","sources":["Utilities/validators.js","webpack://my_project/./src/components/Login/Login.module.css?3530","components/Login/LoginForm.jsx","redux/auth-selector.js","components/Login/Login.jsx","webpack://my_project/./src/components/common/Forms/FormControls.module.css?e8f5","components/common/Forms/FormsControls.js"],"sourcesContent":["export const composeValidators =\r\n(...validators) =>\r\n(value) =>\r\n  validators.reduce(\r\n    (error, validator) => error || validator(value),\r\n    undefined\r\n  );\r\n\r\nexport const requiredField = value => {\r\n    if (value) return undefined\r\n    return 'Это поле не может быть пустым!'\r\n}\r\n\r\n\r\nexport const maxLength500 = value => {\r\n    if (value.length <= 500) return undefined\r\n    return `Максимальная длина поля - 500 символов`\r\n}\r\n\r\nexport const emailValidate = value => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n    if (emailRegex.test(value)) return undefined\r\n    return 'Неверный формат электронной почты!'\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Login_header__avVH8\",\"form\":\"Login_form__2wJTU\",\"formError\":\"Login_formError__ZUq6L\",\"container\":\"Login_container__FrnA4\",\"submit\":\"Login_submit__+QH+c\",\"clear\":\"Login_clear__mAmJ9\",\"captcha\":\"Login_captcha__4lLRZ\",\"signUp\":\"Login_signUp__G5N7P\",\"formContainer\":\"Login_formContainer__PqbIH\",\"btnSignUp\":\"Login_btnSignUp__u169X\",\"err\":\"Login_err__onoP7\"};","import React from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { FormControls } from \"../common/Forms/FormsControls\";\r\nimport {\r\n  requiredField,\r\n  emailValidate,\r\n  composeValidators,\r\n} from \"../../Utilities/validators\";\r\n\r\n\r\nconst LoginForm = (props) => {\r\n  return (\r\n    <Form\r\n      initialValues={{}}\r\n      onSubmit={(values) => {\r\n        props.login({\r\n          email: values.username,\r\n          password: values.password,\r\n          rememberMe: values.rememberMe,\r\n          captcha: values.captcha,\r\n        });\r\n      }}\r\n    >\r\n      {({ handleSubmit, pristine, form, submitting }) => (\r\n        \r\n        <form className={props.error ? s.formError : s.form} onSubmit={handleSubmit}>\r\n          {props.error ? <span className={s.err}>{props.error}</span> : ''}\r\n          <h2>Вход в аккаунт</h2>\r\n          <Field\r\n            name=\"username\"\r\n            component={FormControls}\r\n            element={\"input\"}\r\n            validate={composeValidators(requiredField, emailValidate)}\r\n            type=\"text\"\r\n            placeholder=\"Адрес электронной почты\"\r\n          />\r\n          <Field\r\n            name=\"password\"\r\n            component={FormControls}\r\n            element={\"input\"}\r\n            validate={requiredField}\r\n            type=\"password\"\r\n            placeholder=\"Введите пароль\"\r\n          />\r\n\r\n          <div className={s.container}>\r\n            <label htmlFor=\"remember-me\">Запомнить меня</label>\r\n            <Field name=\"rememberMe\" component=\"input\" type=\"checkbox\" />\r\n          </div>\r\n\r\n          {props.captchaUrl && (\r\n            <div className={s.captcha}>\r\n              {<img src={props.captchaUrl} alt=\"captcha\" />}\r\n              <Field\r\n                name=\"captcha\"\r\n                component={FormControls}\r\n                element=\"input\"\r\n                placeholder=\"Текст с reCAPTCHA\"\r\n                validate={requiredField}\r\n              />\r\n            </div>\r\n          )}\r\n          <button className={s.submit} type=\"submit\" disabled={submitting}>\r\n            Вход\r\n          </button>\r\n          <button\r\n            className={s.clear}\r\n            type=\"button\"\r\n            disabled={pristine || submitting}\r\n            onClick={form.reset}\r\n          >\r\n            Очистить всё\r\n          </button>\r\n        </form>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectState = state => state.auth;\r\n\r\nexport const getIsAuthSelector = createSelector(selectState, state => state.isAuth);\r\n\r\nexport const getCaptchaUrlSelector = createSelector(selectState, state => state.captchaUrl);\r\n\r\nexport const getErrorSelector = createSelector(selectState, state => state.error);\r\n","import React from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport { getIsAuthSelector, getCaptchaUrlSelector, getErrorSelector } from \"../../redux/auth-selector\";\r\n\r\nlet mapStateToProps = (state) => ({\r\n  isAuth: getIsAuthSelector(state),\r\n  captchaUrl: getCaptchaUrlSelector(state),\r\n  error: getErrorSelector(state),\r\n});\r\n\r\nconst Login = (props) => {\r\n  if (props.isAuth) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1 className={s.header}>\r\n        Не смогли вас найти. Попробуйте следующие методы\r\n      </h1>\r\n      <div className={s.formContainer}>\r\n        <LoginForm error={props.error} captchaUrl={props.captchaUrl} login={props.loginUser} />\r\n        <div className={s.signUp}>\r\n          <h2>Регистрация</h2>\r\n          <a\r\n            target=\"_blank\"\r\n            noopener\r\n            noreferrer\r\n            href=\"https://social-network.samuraijs.com/signUp\"\r\n          >\r\n            <button className={s.btnSignUp}>Присоединиться!</button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__XeHE9\",\"error\":\"FormControls_error__exhaF\"};","import React from \"react\" \r\n\r\nimport s from './FormControls.module.css'\r\n\r\nexport const FormControls = ({element, input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        {React.createElement(element, {...input, ...props})}\r\n        {hasError ? <span>{meta.error}</span> : ''}\r\n        </div>\r\n}"],"names":["composeValidators","_len","arguments","length","validators","Array","_key","value","reduce","error","validator","undefined","requiredField","maxLength500","emailValidate","test","props","_jsx","Form","initialValues","onSubmit","values","login","email","username","password","rememberMe","captcha","children","_ref","handleSubmit","pristine","form","submitting","_jsxs","className","s","Field","name","component","FormControls","element","validate","type","placeholder","htmlFor","captchaUrl","src","alt","disabled","onClick","reset","selectState","state","auth","getIsAuthSelector","createSelector","isAuth","getCaptchaUrlSelector","getErrorSelector","connect","loginUser","Navigate","to","LoginForm","target","noopener","noreferrer","href","input","meta","hasError","touched","React"],"sourceRoot":""}